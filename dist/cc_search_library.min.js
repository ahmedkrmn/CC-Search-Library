!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("catalog",[],e):"object"==typeof exports?exports.catalog=e():t.catalog=e()}("undefined"!=typeof self?self:this,function(){return function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e,r){const n=r(1),o=r(2),s="https://api.creativecommons.engineering";t.exports=class{constructor(t,e){if(t&&!e||!t&&e)throw new Error("You only passed one key, please pass both your client_id and client_secret");let r;this.auth=!(!t||!e),this.getToken=(async()=>{if(!r&&this.auth){const o=await n(`${s}/oauth2/token/`,{method:"post",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:`client_id=${t}&client_secret=${e}&grant_type=client_credentials`}),a=await o.json();r=a.access_token}return r})}async imageSearch(t){let e={method:"get",url:"/image/search",params:t};return await this.makeRequest(e)}async imageSearchByCreator(t,e={}){return e.creator=t,this.imageSearch(e)}async makeRequest(t){try{if(this.auth){const e=await this.getToken();t.headers={Authorization:`Bearer ${e}`}}const e="get"===t.method?s+o.format({pathname:t.url,query:t.params}):s+t.url,r=await n(e,{method:t.method,body:JSON.stringify(t.body),headers:t.headers});if(!r.ok)throw new Error(`${r.status} ${r.statusText}`);return r.json()}catch(t){throw t.message}}}},function(t,e,r){"use strict";var n=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==n)return n;throw new Error("unable to locate global object")}();t.exports=e=n.fetch,e.default=n.fetch.bind(n),e.Headers=n.Headers,e.Request=n.Request,e.Response=n.Response},function(t,e,r){"use strict";var n=r(3),o=r(6);function s(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}e.parse=b,e.resolve=function(t,e){return b(t,!1,!0).resolve(e)},e.resolveObject=function(t,e){return t?b(t,!1,!0).resolveObject(e):e},e.format=function(t){o.isString(t)&&(t=b(t));return t instanceof s?t.format():s.prototype.format.call(t)},e.Url=s;var a=/^([a-z0-9.+-]+:)/i,h=/:[0-9]*$/,i=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,u=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),c=["'"].concat(u),l=["%","/","?",";","#"].concat(c),f=["/","?","#"],p=/^[+a-z0-9A-Z_-]{0,63}$/,m=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,d={javascript:!0,"javascript:":!0},v={javascript:!0,"javascript:":!0},y={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0},g=r(7);function b(t,e,r){if(t&&o.isObject(t)&&t instanceof s)return t;var n=new s;return n.parse(t,e,r),n}s.prototype.parse=function(t,e,r){if(!o.isString(t))throw new TypeError("Parameter 'url' must be a string, not "+typeof t);var s=t.indexOf("?"),h=-1!==s&&s<t.indexOf("#")?"?":"#",u=t.split(h);u[0]=u[0].replace(/\\/g,"/");var b=t=u.join(h);if(b=b.trim(),!r&&1===t.split("#").length){var j=i.exec(b);if(j)return this.path=b,this.href=b,this.pathname=j[1],j[2]?(this.search=j[2],this.query=e?g.parse(this.search.substr(1)):this.search.substr(1)):e&&(this.search="",this.query={}),this}var w=a.exec(b);if(w){var x=(w=w[0]).toLowerCase();this.protocol=x,b=b.substr(w.length)}if(r||w||b.match(/^\/\/[^@\/]+@[^@\/]+/)){var O="//"===b.substr(0,2);!O||w&&v[w]||(b=b.substr(2),this.slashes=!0)}if(!v[w]&&(O||w&&!y[w])){for(var C,A,q=-1,I=0;I<f.length;I++){-1!==(R=b.indexOf(f[I]))&&(-1===q||R<q)&&(q=R)}-1!==(A=-1===q?b.lastIndexOf("@"):b.lastIndexOf("@",q))&&(C=b.slice(0,A),b=b.slice(A+1),this.auth=decodeURIComponent(C)),q=-1;for(I=0;I<l.length;I++){var R;-1!==(R=b.indexOf(l[I]))&&(-1===q||R<q)&&(q=R)}-1===q&&(q=b.length),this.host=b.slice(0,q),b=b.slice(q),this.parseHost(),this.hostname=this.hostname||"";var S="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!S)for(var k=this.hostname.split(/\./),U=(I=0,k.length);I<U;I++){var _=k[I];if(_&&!_.match(p)){for(var P="",$=0,T=_.length;$<T;$++)_.charCodeAt($)>127?P+="x":P+=_[$];if(!P.match(p)){var E=k.slice(0,I),N=k.slice(I+1),F=_.match(m);F&&(E.push(F[1]),N.unshift(F[2])),N.length&&(b="/"+N.join(".")+b),this.hostname=E.join(".");break}}}this.hostname.length>255?this.hostname="":this.hostname=this.hostname.toLowerCase(),S||(this.hostname=n.toASCII(this.hostname));var M=this.port?":"+this.port:"",z=this.hostname||"";this.host=z+M,this.href+=this.host,S&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),"/"!==b[0]&&(b="/"+b))}if(!d[x])for(I=0,U=c.length;I<U;I++){var H=c[I];if(-1!==b.indexOf(H)){var L=encodeURIComponent(H);L===H&&(L=escape(H)),b=b.split(H).join(L)}}var B=b.indexOf("#");-1!==B&&(this.hash=b.substr(B),b=b.slice(0,B));var K=b.indexOf("?");if(-1!==K?(this.search=b.substr(K),this.query=b.substr(K+1),e&&(this.query=g.parse(this.query)),b=b.slice(0,K)):e&&(this.search="",this.query={}),b&&(this.pathname=b),y[x]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){M=this.pathname||"";var Z=this.search||"";this.path=M+Z}return this.href=this.format(),this},s.prototype.format=function(){var t=this.auth||"";t&&(t=(t=encodeURIComponent(t)).replace(/%3A/i,":"),t+="@");var e=this.protocol||"",r=this.pathname||"",n=this.hash||"",s=!1,a="";this.host?s=t+this.host:this.hostname&&(s=t+(-1===this.hostname.indexOf(":")?this.hostname:"["+this.hostname+"]"),this.port&&(s+=":"+this.port)),this.query&&o.isObject(this.query)&&Object.keys(this.query).length&&(a=g.stringify(this.query));var h=this.search||a&&"?"+a||"";return e&&":"!==e.substr(-1)&&(e+=":"),this.slashes||(!e||y[e])&&!1!==s?(s="//"+(s||""),r&&"/"!==r.charAt(0)&&(r="/"+r)):s||(s=""),n&&"#"!==n.charAt(0)&&(n="#"+n),h&&"?"!==h.charAt(0)&&(h="?"+h),e+s+(r=r.replace(/[?#]/g,function(t){return encodeURIComponent(t)}))+(h=h.replace("#","%23"))+n},s.prototype.resolve=function(t){return this.resolveObject(b(t,!1,!0)).format()},s.prototype.resolveObject=function(t){if(o.isString(t)){var e=new s;e.parse(t,!1,!0),t=e}for(var r=new s,n=Object.keys(this),a=0;a<n.length;a++){var h=n[a];r[h]=this[h]}if(r.hash=t.hash,""===t.href)return r.href=r.format(),r;if(t.slashes&&!t.protocol){for(var i=Object.keys(t),u=0;u<i.length;u++){var c=i[u];"protocol"!==c&&(r[c]=t[c])}return y[r.protocol]&&r.hostname&&!r.pathname&&(r.path=r.pathname="/"),r.href=r.format(),r}if(t.protocol&&t.protocol!==r.protocol){if(!y[t.protocol]){for(var l=Object.keys(t),f=0;f<l.length;f++){var p=l[f];r[p]=t[p]}return r.href=r.format(),r}if(r.protocol=t.protocol,t.host||v[t.protocol])r.pathname=t.pathname;else{for(var m=(t.pathname||"").split("/");m.length&&!(t.host=m.shift()););t.host||(t.host=""),t.hostname||(t.hostname=""),""!==m[0]&&m.unshift(""),m.length<2&&m.unshift(""),r.pathname=m.join("/")}if(r.search=t.search,r.query=t.query,r.host=t.host||"",r.auth=t.auth,r.hostname=t.hostname||t.host,r.port=t.port,r.pathname||r.search){var d=r.pathname||"",g=r.search||"";r.path=d+g}return r.slashes=r.slashes||t.slashes,r.href=r.format(),r}var b=r.pathname&&"/"===r.pathname.charAt(0),j=t.host||t.pathname&&"/"===t.pathname.charAt(0),w=j||b||r.host&&t.pathname,x=w,O=r.pathname&&r.pathname.split("/")||[],C=(m=t.pathname&&t.pathname.split("/")||[],r.protocol&&!y[r.protocol]);if(C&&(r.hostname="",r.port=null,r.host&&(""===O[0]?O[0]=r.host:O.unshift(r.host)),r.host="",t.protocol&&(t.hostname=null,t.port=null,t.host&&(""===m[0]?m[0]=t.host:m.unshift(t.host)),t.host=null),w=w&&(""===m[0]||""===O[0])),j)r.host=t.host||""===t.host?t.host:r.host,r.hostname=t.hostname||""===t.hostname?t.hostname:r.hostname,r.search=t.search,r.query=t.query,O=m;else if(m.length)O||(O=[]),O.pop(),O=O.concat(m),r.search=t.search,r.query=t.query;else if(!o.isNullOrUndefined(t.search)){if(C)r.hostname=r.host=O.shift(),(S=!!(r.host&&r.host.indexOf("@")>0)&&r.host.split("@"))&&(r.auth=S.shift(),r.host=r.hostname=S.shift());return r.search=t.search,r.query=t.query,o.isNull(r.pathname)&&o.isNull(r.search)||(r.path=(r.pathname?r.pathname:"")+(r.search?r.search:"")),r.href=r.format(),r}if(!O.length)return r.pathname=null,r.search?r.path="/"+r.search:r.path=null,r.href=r.format(),r;for(var A=O.slice(-1)[0],q=(r.host||t.host||O.length>1)&&("."===A||".."===A)||""===A,I=0,R=O.length;R>=0;R--)"."===(A=O[R])?O.splice(R,1):".."===A?(O.splice(R,1),I++):I&&(O.splice(R,1),I--);if(!w&&!x)for(;I--;I)O.unshift("..");!w||""===O[0]||O[0]&&"/"===O[0].charAt(0)||O.unshift(""),q&&"/"!==O.join("/").substr(-1)&&O.push("");var S,k=""===O[0]||O[0]&&"/"===O[0].charAt(0);C&&(r.hostname=r.host=k?"":O.length?O.shift():"",(S=!!(r.host&&r.host.indexOf("@")>0)&&r.host.split("@"))&&(r.auth=S.shift(),r.host=r.hostname=S.shift()));return(w=w||r.host&&O.length)&&!k&&O.unshift(""),O.length?r.pathname=O.join("/"):(r.pathname=null,r.path=null),o.isNull(r.pathname)&&o.isNull(r.search)||(r.path=(r.pathname?r.pathname:"")+(r.search?r.search:"")),r.auth=t.auth||r.auth,r.slashes=r.slashes||t.slashes,r.href=r.format(),r},s.prototype.parseHost=function(){var t=this.host,e=h.exec(t);e&&(":"!==(e=e[0])&&(this.port=e.substr(1)),t=t.substr(0,t.length-e.length)),t&&(this.hostname=t)}},function(t,e,r){(function(t,n){var o;/*! https://mths.be/punycode v1.4.1 by @mathias */!function(s){e&&e.nodeType,t&&t.nodeType;var a="object"==typeof n&&n;a.global!==a&&a.window!==a&&a.self;var h,i=2147483647,u=36,c=1,l=26,f=38,p=700,m=72,d=128,v="-",y=/^xn--/,g=/[^\x20-\x7E]/,b=/[\x2E\u3002\uFF0E\uFF61]/g,j={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},w=u-c,x=Math.floor,O=String.fromCharCode;function C(t){throw new RangeError(j[t])}function A(t,e){for(var r=t.length,n=[];r--;)n[r]=e(t[r]);return n}function q(t,e){var r=t.split("@"),n="";return r.length>1&&(n=r[0]+"@",t=r[1]),n+A((t=t.replace(b,".")).split("."),e).join(".")}function I(t){for(var e,r,n=[],o=0,s=t.length;o<s;)(e=t.charCodeAt(o++))>=55296&&e<=56319&&o<s?56320==(64512&(r=t.charCodeAt(o++)))?n.push(((1023&e)<<10)+(1023&r)+65536):(n.push(e),o--):n.push(e);return n}function R(t){return A(t,function(t){var e="";return t>65535&&(e+=O((t-=65536)>>>10&1023|55296),t=56320|1023&t),e+=O(t)}).join("")}function S(t,e){return t+22+75*(t<26)-((0!=e)<<5)}function k(t,e,r){var n=0;for(t=r?x(t/p):t>>1,t+=x(t/e);t>w*l>>1;n+=u)t=x(t/w);return x(n+(w+1)*t/(t+f))}function U(t){var e,r,n,o,s,a,h,f,p,y,g,b=[],j=t.length,w=0,O=d,A=m;for((r=t.lastIndexOf(v))<0&&(r=0),n=0;n<r;++n)t.charCodeAt(n)>=128&&C("not-basic"),b.push(t.charCodeAt(n));for(o=r>0?r+1:0;o<j;){for(s=w,a=1,h=u;o>=j&&C("invalid-input"),((f=(g=t.charCodeAt(o++))-48<10?g-22:g-65<26?g-65:g-97<26?g-97:u)>=u||f>x((i-w)/a))&&C("overflow"),w+=f*a,!(f<(p=h<=A?c:h>=A+l?l:h-A));h+=u)a>x(i/(y=u-p))&&C("overflow"),a*=y;A=k(w-s,e=b.length+1,0==s),x(w/e)>i-O&&C("overflow"),O+=x(w/e),w%=e,b.splice(w++,0,O)}return R(b)}function _(t){var e,r,n,o,s,a,h,f,p,y,g,b,j,w,A,q=[];for(b=(t=I(t)).length,e=d,r=0,s=m,a=0;a<b;++a)(g=t[a])<128&&q.push(O(g));for(n=o=q.length,o&&q.push(v);n<b;){for(h=i,a=0;a<b;++a)(g=t[a])>=e&&g<h&&(h=g);for(h-e>x((i-r)/(j=n+1))&&C("overflow"),r+=(h-e)*j,e=h,a=0;a<b;++a)if((g=t[a])<e&&++r>i&&C("overflow"),g==e){for(f=r,p=u;!(f<(y=p<=s?c:p>=s+l?l:p-s));p+=u)A=f-y,w=u-y,q.push(O(S(y+A%w,0))),f=x(A/w);q.push(O(S(f,0))),s=k(r,j,n==o),r=0,++n}++r,++e}return q.join("")}h={version:"1.4.1",ucs2:{decode:I,encode:R},decode:U,encode:_,toASCII:function(t){return q(t,function(t){return g.test(t)?"xn--"+_(t):t})},toUnicode:function(t){return q(t,function(t){return y.test(t)?U(t.slice(4).toLowerCase()):t})}},void 0===(o=function(){return h}.call(e,r,e,t))||(t.exports=o)}()}).call(this,r(4)(t),r(5))},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(t){"object"==typeof window&&(r=window)}t.exports=r},function(t,e,r){"use strict";t.exports={isString:function(t){return"string"==typeof t},isObject:function(t){return"object"==typeof t&&null!==t},isNull:function(t){return null===t},isNullOrUndefined:function(t){return null==t}}},function(t,e,r){"use strict";e.decode=e.parse=r(8),e.encode=e.stringify=r(9)},function(t,e,r){"use strict";function n(t,e){return Object.prototype.hasOwnProperty.call(t,e)}t.exports=function(t,e,r,s){e=e||"&",r=r||"=";var a={};if("string"!=typeof t||0===t.length)return a;var h=/\+/g;t=t.split(e);var i=1e3;s&&"number"==typeof s.maxKeys&&(i=s.maxKeys);var u=t.length;i>0&&u>i&&(u=i);for(var c=0;c<u;++c){var l,f,p,m,d=t[c].replace(h,"%20"),v=d.indexOf(r);v>=0?(l=d.substr(0,v),f=d.substr(v+1)):(l=d,f=""),p=decodeURIComponent(l),m=decodeURIComponent(f),n(a,p)?o(a[p])?a[p].push(m):a[p]=[a[p],m]:a[p]=m}return a};var o=Array.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)}},function(t,e,r){"use strict";var n=function(t){switch(typeof t){case"string":return t;case"boolean":return t?"true":"false";case"number":return isFinite(t)?t:"";default:return""}};t.exports=function(t,e,r,h){return e=e||"&",r=r||"=",null===t&&(t=void 0),"object"==typeof t?s(a(t),function(a){var h=encodeURIComponent(n(a))+r;return o(t[a])?s(t[a],function(t){return h+encodeURIComponent(n(t))}).join(e):h+encodeURIComponent(n(t[a]))}).join(e):h?encodeURIComponent(n(h))+r+encodeURIComponent(n(t)):""};var o=Array.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)};function s(t,e){if(t.map)return t.map(e);for(var r=[],n=0;n<t.length;n++)r.push(e(t[n],n));return r}var a=Object.keys||function(t){var e=[];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.push(r);return e}}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,